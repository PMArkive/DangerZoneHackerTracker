using DangerZoneHackerTracker.Models;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Windows.Input;
using Keyboard = DangerZoneHackerTracker.Models.Keyboard;

namespace DangerZoneHackerTracker
{
	public static class KeyConvert
	{
		//public static Key ToKey(VirtualKeyCode code)
		//{
		//	switch (code)
		//	{
		//		case VirtualKeyCode.CANCEL:			return Key.Cancel;
		//		case VirtualKeyCode.BACK:			return Key.Back;
		//		case VirtualKeyCode.TAB:			return Key.Tab;
		//		case VirtualKeyCode.CLEAR:			return Key.Clear;
		//		case VirtualKeyCode.RETURN:			return Key.Enter;
		//		case VirtualKeyCode.PAUSE:			return Key.Pause;
		//		case VirtualKeyCode.CAPITAL:		return Key.CapsLock;
		//		case VirtualKeyCode.ESCAPE:			return Key.Escape;
		//		case VirtualKeyCode.SPACE:			return Key.Space;
		//		case VirtualKeyCode.PRIOR:			return Key.PageUp;
		//		case VirtualKeyCode.NEXT:			return Key.PageDown;
		//		case VirtualKeyCode.END:			return Key.End;
		//		case VirtualKeyCode.HOME:			return Key.Home;
		//		case VirtualKeyCode.LEFT:			return Key.Left;
		//		case VirtualKeyCode.UP:				return Key.Up;
		//		case VirtualKeyCode.RIGHT:			return Key.Right;
		//		case VirtualKeyCode.DOWN:			return Key.Down;
		//		case VirtualKeyCode.SELECT:			return Key.Select;
		//		case VirtualKeyCode.PRINT:			return Key.Print;
		//		case VirtualKeyCode.EXECUTE:		return Key.Execute;
		//		case VirtualKeyCode.SNAPSHOT:		return Key.PrintScreen;
		//		case VirtualKeyCode.INSERT:			return Key.Insert;
		//		case VirtualKeyCode.DELETE:			return Key.Delete;
		//		case VirtualKeyCode.HELP:			return Key.Help;
		//		case VirtualKeyCode.VK_0:			return Key.D0;
		//		case VirtualKeyCode.VK_1:			return Key.D1;
		//		case VirtualKeyCode.VK_2:			return Key.D2;
		//		case VirtualKeyCode.VK_3:			return Key.D3;
		//		case VirtualKeyCode.VK_4:			return Key.D4;
		//		case VirtualKeyCode.VK_5:			return Key.D5;
		//		case VirtualKeyCode.VK_6:			return Key.D6;
		//		case VirtualKeyCode.VK_7:			return Key.D7;
		//		case VirtualKeyCode.VK_8:			return Key.D8;
		//		case VirtualKeyCode.VK_9:			return Key.D9;
		//		case VirtualKeyCode.VK_A:			return Key.A;
		//		case VirtualKeyCode.VK_B:			return Key.B;
		//		case VirtualKeyCode.VK_C:			return Key.C;
		//		case VirtualKeyCode.VK_D:			return Key.D;
		//		case VirtualKeyCode.VK_E:			return Key.E;
		//		case VirtualKeyCode.VK_F:			return Key.F;
		//		case VirtualKeyCode.VK_G:			return Key.G;
		//		case VirtualKeyCode.VK_H:			return Key.H;
		//		case VirtualKeyCode.VK_I:			return Key.I;
		//		case VirtualKeyCode.VK_J:			return Key.J;
		//		case VirtualKeyCode.VK_K:			return Key.K;
		//		case VirtualKeyCode.VK_L:			return Key.L;
		//		case VirtualKeyCode.VK_M:			return Key.M;
		//		case VirtualKeyCode.VK_N:			return Key.N;
		//		case VirtualKeyCode.VK_O:			return Key.O;
		//		case VirtualKeyCode.VK_P:			return Key.P;
		//		case VirtualKeyCode.VK_Q:			return Key.Q;
		//		case VirtualKeyCode.VK_R:			return Key.R;
		//		case VirtualKeyCode.VK_S:			return Key.S;
		//		case VirtualKeyCode.VK_T:			return Key.T;
		//		case VirtualKeyCode.VK_U:			return Key.U;
		//		case VirtualKeyCode.VK_V:			return Key.V;
		//		case VirtualKeyCode.VK_W:			return Key.W;
		//		case VirtualKeyCode.VK_X:			return Key.X;
		//		case VirtualKeyCode.VK_Y:			return Key.Y;
		//		case VirtualKeyCode.VK_Z:			return Key.Z;
		//		case VirtualKeyCode.LWIN:			return Key.LWin;
		//		case VirtualKeyCode.RWIN:			return Key.RWin;
		//		case VirtualKeyCode.APPS:			return Key.Apps;
		//		case VirtualKeyCode.SLEEP:			return Key.Sleep;
		//		case VirtualKeyCode.NUMPAD0:		return Key.NumPad0;
		//		case VirtualKeyCode.NUMPAD1:		return Key.NumPad1;
		//		case VirtualKeyCode.NUMPAD2:		return Key.NumPad2;
		//		case VirtualKeyCode.NUMPAD3:		return Key.NumPad3;
		//		case VirtualKeyCode.NUMPAD4:		return Key.NumPad4;
		//		case VirtualKeyCode.NUMPAD5:		return Key.NumPad5;
		//		case VirtualKeyCode.NUMPAD6:		return Key.NumPad6;
		//		case VirtualKeyCode.NUMPAD7:		return Key.NumPad7;
		//		case VirtualKeyCode.NUMPAD8:		return Key.NumPad8;
		//		case VirtualKeyCode.NUMPAD9:		return Key.NumPad9;
		//		case VirtualKeyCode.MULTIPLY:		return Key.Multiply;
		//		case VirtualKeyCode.ADD:			return Key.Add;
		//		case VirtualKeyCode.SEPARATOR:		return Key.Separator;
		//		case VirtualKeyCode.SUBTRACT:		return Key.Subtract;
		//		case VirtualKeyCode.DECIMAL:		return Key.Decimal;
		//		case VirtualKeyCode.DIVIDE:			return Key.Divide;
		//		case VirtualKeyCode.F1:				return Key.F1;
		//		case VirtualKeyCode.F2:				return Key.F2;
		//		case VirtualKeyCode.F3:				return Key.F3;
		//		case VirtualKeyCode.F4:				return Key.F4;
		//		case VirtualKeyCode.F5:				return Key.F5;
		//		case VirtualKeyCode.F6:				return Key.F6;
		//		case VirtualKeyCode.F7:				return Key.F7;
		//		case VirtualKeyCode.F8:				return Key.F8;
		//		case VirtualKeyCode.F9:				return Key.F9;
		//		case VirtualKeyCode.F10:			return Key.F10;
		//		case VirtualKeyCode.F11:			return Key.F11;
		//		case VirtualKeyCode.F12:			return Key.F12;
		//		case VirtualKeyCode.F13:			return Key.F13;
		//		case VirtualKeyCode.F14:			return Key.F14;
		//		case VirtualKeyCode.F15:			return Key.F15;
		//		case VirtualKeyCode.F16:			return Key.F16;
		//		case VirtualKeyCode.F17:			return Key.F17;
		//		case VirtualKeyCode.F18:			return Key.F18;
		//		case VirtualKeyCode.F19:			return Key.F19;
		//		case VirtualKeyCode.F20:			return Key.F20;
		//		case VirtualKeyCode.F21:			return Key.F21;
		//		case VirtualKeyCode.F22:			return Key.F22;
		//		case VirtualKeyCode.F23:			return Key.F23;
		//		case VirtualKeyCode.F24:			return Key.F24;
		//		case VirtualKeyCode.NUMLOCK:		return Key.NumLock;
		//		case VirtualKeyCode.SCROLL:			return Key.Scroll;
		//		case VirtualKeyCode.LSHIFT:			return Key.LeftShift;
		//		case VirtualKeyCode.RSHIFT:			return Key.RightShift;
		//		case VirtualKeyCode.LCONTROL:		return Key.LeftCtrl;
		//		case VirtualKeyCode.RCONTROL:		return Key.RightCtrl;
		//		case VirtualKeyCode.LMENU:			return Key.LeftAlt;
		//		case VirtualKeyCode.RMENU:			return Key.RightAlt;
		//		default: 							return 0;
		//	}
		//}

		//public static VirtualKeyCode ToVirtualKeyCode(Key key)
		//{
		//	switch (key)
		//	{
		//		case Key.None:			return 0;
		//		case Key.Cancel:		return VirtualKeyCode.CANCEL;
		//		case Key.Back:			return VirtualKeyCode.BACK;
		//		case Key.Tab:			return VirtualKeyCode.TAB;
		//		case Key.Clear:			return VirtualKeyCode.CLEAR;
		//		case Key.Enter:			return VirtualKeyCode.RETURN;
		//		case Key.Pause:			return VirtualKeyCode.PAUSE;
		//		case Key.CapsLock:		return VirtualKeyCode.CAPITAL;
		//		case Key.Escape:		return VirtualKeyCode.ESCAPE;
		//		case Key.Space:			return VirtualKeyCode.SPACE;
		//		case Key.PageUp:		return VirtualKeyCode.PRIOR;
		//		case Key.PageDown:		return VirtualKeyCode.NEXT;
		//		case Key.End:			return VirtualKeyCode.END;
		//		case Key.Home:			return VirtualKeyCode.HOME;
		//		case Key.Left:			return VirtualKeyCode.LEFT;
		//		case Key.Up:			return VirtualKeyCode.UP;
		//		case Key.Right:			return VirtualKeyCode.RIGHT;
		//		case Key.Down:			return VirtualKeyCode.DOWN;
		//		case Key.Select:		return VirtualKeyCode.SELECT;
		//		case Key.Print:			return VirtualKeyCode.PRINT;
		//		case Key.Execute:		return VirtualKeyCode.EXECUTE;
		//		case Key.PrintScreen:	return VirtualKeyCode.SNAPSHOT;
		//		case Key.Insert:		return VirtualKeyCode.INSERT;
		//		case Key.Delete:		return VirtualKeyCode.DELETE;
		//		case Key.Help:			return VirtualKeyCode.HELP;
		//		case Key.D0:			return VirtualKeyCode.VK_0;
		//		case Key.D1:			return VirtualKeyCode.VK_1;
		//		case Key.D2:			return VirtualKeyCode.VK_2;
		//		case Key.D3:			return VirtualKeyCode.VK_3;
		//		case Key.D4:			return VirtualKeyCode.VK_4;
		//		case Key.D5:			return VirtualKeyCode.VK_5;
		//		case Key.D6:			return VirtualKeyCode.VK_6;
		//		case Key.D7:			return VirtualKeyCode.VK_7;
		//		case Key.D8:			return VirtualKeyCode.VK_8;
		//		case Key.D9:			return VirtualKeyCode.VK_9;
		//		case Key.A:				return VirtualKeyCode.VK_A;
		//		case Key.B:				return VirtualKeyCode.VK_B;
		//		case Key.C:				return VirtualKeyCode.VK_C;
		//		case Key.D:				return VirtualKeyCode.VK_D;
		//		case Key.E:				return VirtualKeyCode.VK_E;
		//		case Key.F:				return VirtualKeyCode.VK_F;
		//		case Key.G:				return VirtualKeyCode.VK_G;
		//		case Key.H:				return VirtualKeyCode.VK_H;
		//		case Key.I:				return VirtualKeyCode.VK_I;
		//		case Key.J:				return VirtualKeyCode.VK_J;
		//		case Key.K:				return VirtualKeyCode.VK_K;
		//		case Key.L:				return VirtualKeyCode.VK_L;
		//		case Key.M:				return VirtualKeyCode.VK_M;
		//		case Key.N:				return VirtualKeyCode.VK_N;
		//		case Key.O:				return VirtualKeyCode.VK_O;
		//		case Key.P:				return VirtualKeyCode.VK_P;
		//		case Key.Q:				return VirtualKeyCode.VK_Q;
		//		case Key.R:				return VirtualKeyCode.VK_R;
		//		case Key.S:				return VirtualKeyCode.VK_S;
		//		case Key.T:				return VirtualKeyCode.VK_T;
		//		case Key.U:				return VirtualKeyCode.VK_U;
		//		case Key.V:				return VirtualKeyCode.VK_V;
		//		case Key.W:				return VirtualKeyCode.VK_W;
		//		case Key.X:				return VirtualKeyCode.VK_X;
		//		case Key.Y:				return VirtualKeyCode.VK_Y;
		//		case Key.Z:				return VirtualKeyCode.VK_Z;
		//		case Key.LWin:			return VirtualKeyCode.LWIN;
		//		case Key.RWin:			return VirtualKeyCode.RWIN;
		//		case Key.Apps:			return VirtualKeyCode.APPS;
		//		case Key.Sleep:			return VirtualKeyCode.SLEEP;
		//		case Key.NumPad0:		return VirtualKeyCode.NUMPAD0;
		//		case Key.NumPad1:		return VirtualKeyCode.NUMPAD1;
		//		case Key.NumPad2:		return VirtualKeyCode.NUMPAD2;
		//		case Key.NumPad3:		return VirtualKeyCode.NUMPAD3;
		//		case Key.NumPad4:		return VirtualKeyCode.NUMPAD4;
		//		case Key.NumPad5:		return VirtualKeyCode.NUMPAD5;
		//		case Key.NumPad6:		return VirtualKeyCode.NUMPAD6;
		//		case Key.NumPad7:		return VirtualKeyCode.NUMPAD7;
		//		case Key.NumPad8:		return VirtualKeyCode.NUMPAD8;
		//		case Key.NumPad9:		return VirtualKeyCode.NUMPAD9;
		//		case Key.Multiply:		return VirtualKeyCode.MULTIPLY;
		//		case Key.Add:			return VirtualKeyCode.ADD;
		//		case Key.Separator:		return VirtualKeyCode.SEPARATOR;
		//		case Key.Subtract:		return VirtualKeyCode.SUBTRACT;
		//		case Key.Decimal:		return VirtualKeyCode.DECIMAL;
		//		case Key.Divide:		return VirtualKeyCode.DIVIDE;
		//		case Key.F1:			return VirtualKeyCode.F1;
		//		case Key.F2:			return VirtualKeyCode.F2;
		//		case Key.F3:			return VirtualKeyCode.F3;
		//		case Key.F4:			return VirtualKeyCode.F4;
		//		case Key.F5:			return VirtualKeyCode.F5;
		//		case Key.F6:			return VirtualKeyCode.F6;
		//		case Key.F7:			return VirtualKeyCode.F7;
		//		case Key.F8:			return VirtualKeyCode.F8;
		//		case Key.F9:			return VirtualKeyCode.F9;
		//		case Key.F10:			return VirtualKeyCode.F10;
		//		case Key.F11:			return VirtualKeyCode.F11;
		//		case Key.F12:			return VirtualKeyCode.F12;
		//		case Key.F13:			return VirtualKeyCode.F13;
		//		case Key.F14:			return VirtualKeyCode.F14;
		//		case Key.F15:			return VirtualKeyCode.F15;
		//		case Key.F16:			return VirtualKeyCode.F16;
		//		case Key.F17:			return VirtualKeyCode.F17;
		//		case Key.F18:			return VirtualKeyCode.F18;
		//		case Key.F19:			return VirtualKeyCode.F19;
		//		case Key.F20:			return VirtualKeyCode.F20;
		//		case Key.F21:			return VirtualKeyCode.F21;
		//		case Key.F22:			return VirtualKeyCode.F22;
		//		case Key.F23:			return VirtualKeyCode.F23;
		//		case Key.F24:			return VirtualKeyCode.F24;
		//		case Key.NumLock:		return VirtualKeyCode.NUMLOCK;
		//		case Key.Scroll:		return VirtualKeyCode.SCROLL;
		//		case Key.LeftShift:		return VirtualKeyCode.LSHIFT;
		//		case Key.RightShift:	return VirtualKeyCode.RSHIFT;
		//		case Key.LeftCtrl:		return VirtualKeyCode.LCONTROL;
		//		case Key.RightCtrl:		return VirtualKeyCode.RCONTROL;
		//		case Key.LeftAlt:		return VirtualKeyCode.LMENU;
		//		case Key.RightAlt:		return VirtualKeyCode.RMENU;
		//		default:				return 0;
		//	}
		//}

		public static Keyboard.DirectXKeyStrokes ToDirectXKeyCode(Key key)
		{
			switch (key)
			{
				case Key.None: return 0;
				case Key.Back: return Keyboard.DirectXKeyStrokes.DIK_BACK;
				case Key.Tab: return Keyboard.DirectXKeyStrokes.DIK_TAB;
				case Key.Enter: return Keyboard.DirectXKeyStrokes.DIK_RETURN;
				case Key.Capital: return Keyboard.DirectXKeyStrokes.DIK_CAPITAL;
				case Key.Escape: return Keyboard.DirectXKeyStrokes.DIK_ESCAPE;
				case Key.Space: return Keyboard.DirectXKeyStrokes.DIK_SPACE;
				case Key.Prior: return Keyboard.DirectXKeyStrokes.DIK_PRIOR;
				case Key.Next: return Keyboard.DirectXKeyStrokes.DIK_NEXT;
				case Key.End: return Keyboard.DirectXKeyStrokes.DIK_END;
				case Key.Home: return Keyboard.DirectXKeyStrokes.DIK_HOME;
				case Key.Left: return Keyboard.DirectXKeyStrokes.DIK_LEFT;
				case Key.Up: return Keyboard.DirectXKeyStrokes.DIK_UP;
				case Key.Right: return Keyboard.DirectXKeyStrokes.DIK_RIGHT;
				case Key.Down: return Keyboard.DirectXKeyStrokes.DIK_DOWN;
				case Key.Insert: return Keyboard.DirectXKeyStrokes.DIK_INSERT;
				case Key.Delete: return Keyboard.DirectXKeyStrokes.DIK_DELETE;
				case Key.A: return Keyboard.DirectXKeyStrokes.DIK_A;
				case Key.B: return Keyboard.DirectXKeyStrokes.DIK_B;
				case Key.C: return Keyboard.DirectXKeyStrokes.DIK_C;
				case Key.D: return Keyboard.DirectXKeyStrokes.DIK_D;
				case Key.E: return Keyboard.DirectXKeyStrokes.DIK_E;
				case Key.F: return Keyboard.DirectXKeyStrokes.DIK_F;
				case Key.G: return Keyboard.DirectXKeyStrokes.DIK_G;
				case Key.H: return Keyboard.DirectXKeyStrokes.DIK_H;
				case Key.I: return Keyboard.DirectXKeyStrokes.DIK_I;
				case Key.J: return Keyboard.DirectXKeyStrokes.DIK_J;
				case Key.K: return Keyboard.DirectXKeyStrokes.DIK_K;
				case Key.L: return Keyboard.DirectXKeyStrokes.DIK_L;
				case Key.M: return Keyboard.DirectXKeyStrokes.DIK_M;
				case Key.N: return Keyboard.DirectXKeyStrokes.DIK_N;
				case Key.O: return Keyboard.DirectXKeyStrokes.DIK_O;
				case Key.P: return Keyboard.DirectXKeyStrokes.DIK_P;
				case Key.Q: return Keyboard.DirectXKeyStrokes.DIK_Q;
				case Key.R: return Keyboard.DirectXKeyStrokes.DIK_R;
				case Key.S: return Keyboard.DirectXKeyStrokes.DIK_S;
				case Key.T: return Keyboard.DirectXKeyStrokes.DIK_T;
				case Key.U: return Keyboard.DirectXKeyStrokes.DIK_U;
				case Key.V: return Keyboard.DirectXKeyStrokes.DIK_V;
				case Key.W: return Keyboard.DirectXKeyStrokes.DIK_W;
				case Key.X: return Keyboard.DirectXKeyStrokes.DIK_X;
				case Key.Y: return Keyboard.DirectXKeyStrokes.DIK_Y;
				case Key.Z: return Keyboard.DirectXKeyStrokes.DIK_Z;
				case Key.D0: return Keyboard.DirectXKeyStrokes.DIK_0;
				case Key.D1: return Keyboard.DirectXKeyStrokes.DIK_1;
				case Key.D2: return Keyboard.DirectXKeyStrokes.DIK_2;
				case Key.D3: return Keyboard.DirectXKeyStrokes.DIK_3;
				case Key.D4: return Keyboard.DirectXKeyStrokes.DIK_4;
				case Key.D5: return Keyboard.DirectXKeyStrokes.DIK_5;
				case Key.D6: return Keyboard.DirectXKeyStrokes.DIK_6;
				case Key.D7: return Keyboard.DirectXKeyStrokes.DIK_7;
				case Key.D8: return Keyboard.DirectXKeyStrokes.DIK_8;
				case Key.D9: return Keyboard.DirectXKeyStrokes.DIK_9;
				case Key.LWin: return Keyboard.DirectXKeyStrokes.DIK_LWIN;
				case Key.RWin: return Keyboard.DirectXKeyStrokes.DIK_RWIN;
				case Key.Apps: return Keyboard.DirectXKeyStrokes.DIK_APPS;
				case Key.NumPad0: return Keyboard.DirectXKeyStrokes.DIK_NUMPAD0;
				case Key.NumPad1: return Keyboard.DirectXKeyStrokes.DIK_NUMPAD1;
				case Key.NumPad2: return Keyboard.DirectXKeyStrokes.DIK_NUMPAD2;
				case Key.NumPad3: return Keyboard.DirectXKeyStrokes.DIK_NUMPAD3;
				case Key.NumPad4: return Keyboard.DirectXKeyStrokes.DIK_NUMPAD4;
				case Key.Clear: return Keyboard.DirectXKeyStrokes.DIK_NUMPAD5;
				case Key.NumPad5: return Keyboard.DirectXKeyStrokes.DIK_NUMPAD5;
				case Key.NumPad6: return Keyboard.DirectXKeyStrokes.DIK_NUMPAD6;
				case Key.NumPad7: return Keyboard.DirectXKeyStrokes.DIK_NUMPAD7;
				case Key.NumPad8: return Keyboard.DirectXKeyStrokes.DIK_NUMPAD8;
				case Key.NumPad9: return Keyboard.DirectXKeyStrokes.DIK_NUMPAD9;
				case Key.Multiply: return Keyboard.DirectXKeyStrokes.DIK_MULTIPLY;
				case Key.Add: return Keyboard.DirectXKeyStrokes.DIK_ADD;
				case Key.Subtract: return Keyboard.DirectXKeyStrokes.DIK_SUBTRACT;
				case Key.Decimal: return Keyboard.DirectXKeyStrokes.DIK_DECIMAL;
				case Key.Divide: return Keyboard.DirectXKeyStrokes.DIK_DIVIDE;
				case Key.F1: return Keyboard.DirectXKeyStrokes.DIK_F1;
				case Key.F2: return Keyboard.DirectXKeyStrokes.DIK_F2;
				case Key.F3: return Keyboard.DirectXKeyStrokes.DIK_F3;
				case Key.F4: return Keyboard.DirectXKeyStrokes.DIK_F4;
				case Key.F5: return Keyboard.DirectXKeyStrokes.DIK_F5;
				case Key.F6: return Keyboard.DirectXKeyStrokes.DIK_F6;
				case Key.F7: return Keyboard.DirectXKeyStrokes.DIK_F7;
				case Key.F8: return Keyboard.DirectXKeyStrokes.DIK_F8;
				case Key.F9: return Keyboard.DirectXKeyStrokes.DIK_F9;
				case Key.F10: return Keyboard.DirectXKeyStrokes.DIK_F10;
				case Key.F11: return Keyboard.DirectXKeyStrokes.DIK_F11;
				case Key.F12: return Keyboard.DirectXKeyStrokes.DIK_F12;
				case Key.F13: return Keyboard.DirectXKeyStrokes.DIK_F13;
				case Key.F14: return Keyboard.DirectXKeyStrokes.DIK_F14;
				case Key.F15: return Keyboard.DirectXKeyStrokes.DIK_F15;
				case Key.NumLock: return Keyboard.DirectXKeyStrokes.DIK_NUMLOCK;
				case Key.Scroll: return Keyboard.DirectXKeyStrokes.DIK_SCROLL;
				case Key.LeftShift: return Keyboard.DirectXKeyStrokes.DIK_LSHIFT;
				case Key.RightShift: return Keyboard.DirectXKeyStrokes.DIK_RSHIFT;
				case Key.LeftCtrl: return Keyboard.DirectXKeyStrokes.DIK_LCONTROL;
				case Key.RightCtrl: return Keyboard.DirectXKeyStrokes.DIK_RCONTROL;
				case Key.LeftAlt: return Keyboard.DirectXKeyStrokes.DIK_LALT;
				case Key.RightAlt: return Keyboard.DirectXKeyStrokes.DIK_RALT;
				default: return 0;
			}
		}

		public static CSGO.KeyBinds ToCSGOKeyBind(Key key)
		{
			switch (key)
			{
				case Key.None: return CSGO.KeyBinds.NONE;
				case Key.Cancel: return CSGO.KeyBinds.ESCAPE;
				case Key.Back: return CSGO.KeyBinds.BACKSLASH;
				case Key.Tab: return CSGO.KeyBinds.TAB;
				case Key.Clear: return CSGO.KeyBinds.ESCAPE;
				case Key.Enter: return CSGO.KeyBinds.ENTER;
				case Key.Pause: return CSGO.KeyBinds.BREAK;
				case Key.CapsLock: return CSGO.KeyBinds.CAPSLOCK;
				case Key.Escape: return CSGO.KeyBinds.ESCAPE;
				case Key.Space: return CSGO.KeyBinds.SPACE;
				case Key.PageUp: return CSGO.KeyBinds.PAGEUP;
				case Key.PageDown: return CSGO.KeyBinds.PAGEDOWN;
				case Key.End: return CSGO.KeyBinds.END;
				case Key.Home: return CSGO.KeyBinds.HOME;
				case Key.Left: return CSGO.KeyBinds.LEFT;
				case Key.Up: return CSGO.KeyBinds.UP;
				case Key.Right: return CSGO.KeyBinds.RIGHT;
				case Key.Down: return CSGO.KeyBinds.DOWN;
				//case Key.Print: return CSGO.KeyBinds.PRINT;
				case Key.Insert: return CSGO.KeyBinds.INSERT;
				case Key.Delete: return CSGO.KeyBinds.DELETE;
				case Key.A: return CSGO.KeyBinds.A;
				case Key.B: return CSGO.KeyBinds.B;
				case Key.C: return CSGO.KeyBinds.C;
				case Key.D: return CSGO.KeyBinds.D;
				case Key.E: return CSGO.KeyBinds.E;
				case Key.F: return CSGO.KeyBinds.F;
				case Key.G: return CSGO.KeyBinds.G;
				case Key.H: return CSGO.KeyBinds.H;
				case Key.I: return CSGO.KeyBinds.I;
				case Key.J: return CSGO.KeyBinds.J;
				case Key.K: return CSGO.KeyBinds.K;
				case Key.L: return CSGO.KeyBinds.L;
				case Key.M: return CSGO.KeyBinds.M;
				case Key.N: return CSGO.KeyBinds.N;
				case Key.O: return CSGO.KeyBinds.O;
				case Key.P: return CSGO.KeyBinds.P;
				case Key.Q: return CSGO.KeyBinds.Q;
				case Key.R: return CSGO.KeyBinds.R;
				case Key.S: return CSGO.KeyBinds.S;
				case Key.T: return CSGO.KeyBinds.T;
				case Key.U: return CSGO.KeyBinds.U;
				case Key.V: return CSGO.KeyBinds.V;
				case Key.W: return CSGO.KeyBinds.W;
				case Key.X: return CSGO.KeyBinds.X;
				case Key.Y: return CSGO.KeyBinds.Y;
				case Key.Z: return CSGO.KeyBinds.Z;
				case Key.D0: return CSGO.KeyBinds.ZERO;
				case Key.D1: return CSGO.KeyBinds.ONE;
				case Key.D2: return CSGO.KeyBinds.TWO;
				case Key.D3: return CSGO.KeyBinds.THREE;
				case Key.D4: return CSGO.KeyBinds.FOUR;
				case Key.D5: return CSGO.KeyBinds.FIVE;
				case Key.D6: return CSGO.KeyBinds.SIX;
				case Key.D7: return CSGO.KeyBinds.SEVEN;
				case Key.D8: return CSGO.KeyBinds.EIGHT;
				case Key.D9: return CSGO.KeyBinds.NINE;
				case Key.LWin: return CSGO.KeyBinds.LWIN;
				case Key.RWin: return CSGO.KeyBinds.RWIN;
				case Key.NumPad0: return CSGO.KeyBinds.PAD_0;
				case Key.NumPad1: return CSGO.KeyBinds.PAD_1;
				case Key.NumPad2: return CSGO.KeyBinds.PAD_2;
				case Key.NumPad3: return CSGO.KeyBinds.PAD_3;
				case Key.NumPad4: return CSGO.KeyBinds.PAD_4;
				case Key.NumPad5: return CSGO.KeyBinds.PAD_5;
				case Key.NumPad6: return CSGO.KeyBinds.PAD_6;
				case Key.NumPad7: return CSGO.KeyBinds.PAD_7;
				case Key.NumPad8: return CSGO.KeyBinds.PAD_8;
				case Key.NumPad9: return CSGO.KeyBinds.PAD_9;
				case Key.Multiply: return CSGO.KeyBinds.PAD_MULTIPLY;
				case Key.Add: return CSGO.KeyBinds.PAD_PLUS;
				case Key.Separator: return CSGO.KeyBinds.PAD_DIVIDE;
				case Key.Subtract: return CSGO.KeyBinds.PAD_MINUS;
				case Key.Decimal: return CSGO.KeyBinds.PAD_DECIMAL;
				case Key.Divide: return CSGO.KeyBinds.PAD_DIVIDE;
				case Key.F1: return CSGO.KeyBinds.F1;
				case Key.F2: return CSGO.KeyBinds.F2;
				case Key.F3: return CSGO.KeyBinds.F3;
				case Key.F4: return CSGO.KeyBinds.F4;
				case Key.F5: return CSGO.KeyBinds.F5;
				case Key.F6: return CSGO.KeyBinds.F6;
				case Key.F7: return CSGO.KeyBinds.F7;
				case Key.F8: return CSGO.KeyBinds.F8;
				case Key.F9: return CSGO.KeyBinds.F9;
				case Key.F10: return CSGO.KeyBinds.F10;
				case Key.F11: return CSGO.KeyBinds.F11;
				case Key.F12: return CSGO.KeyBinds.F12;
				case Key.NumLock: return CSGO.KeyBinds.NUMLOCK;
				case Key.Scroll: return CSGO.KeyBinds.SCROLLLOCK;
				case Key.LeftShift: return CSGO.KeyBinds.LSHIFT;
				case Key.RightShift: return CSGO.KeyBinds.RSHIFT;
				case Key.LeftCtrl: return CSGO.KeyBinds.LCONTROL;
				case Key.RightCtrl: return CSGO.KeyBinds.RCONTROL;
				case Key.LeftAlt: return CSGO.KeyBinds.LALT;
				case Key.RightAlt: return CSGO.KeyBinds.RALT;
				case Key.Apps: return CSGO.KeyBinds.APP;
				default: return CSGO.KeyBinds.NONE;
			}
		}
	}
}
